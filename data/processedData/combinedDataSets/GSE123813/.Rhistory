emp.matrix <- Matrix(data = 0,
nrow = nrow(sparse.matrix ),
ncol = length(SC.barcodes),
dimnames = list(rownames(sparse.matrix), SC.barcodes),
sparse = TRUE)
sparse.matrix <- merge.sparse(list(sparse.matrix, emp.matrix))
integrated <- adding.assay(integrated, sparse.matrix, "mito.variant")
saveRDS(integrated, "Signac.integrated.rds")
DimPlot(integrated)
library(Seurat)
DimPlot(integrated)
head(integrated[[]])
integrated$time.point <- stringr::str_split(integrated$orig.ident, "-", simplify = TRUE)[,2]
i
integrated$tissue <- stringr::str_split(integrated$orig.ident, "-", simplify = TRUE)[,3]
DimPlot(integrated, split.by = tissue)
DimPlot(integrated, split.by = "tissue")
DimPlot(integrated, split.by = "tissue")
DimPlot(integrated, split.by = "time.point")
unique(integrated$orig.ident)
library(Nebulosa)
plot_density(integrated,
features = "CD8A",
method = "wkde")
head(rownames(integrated@assays$RNA))
plot_density(integrated,
features = "CD8B",
method = "wkde")
plot_density(integrated,
features = "CD3E",
method = "wkde")
genes <- rownames(integrated@assays$RNA)
genes <- as.data.frame(rownames(integrated@assays$RNA))
View(genes)
plot_density(integrated,
features = "CD8A",
method = "wkde")
plot_density(integrated,
features = "CD8A")
plot_density(integrated,
slot = "RNA",
features = "CD8A")
DefaultAssay(integrated)
DefaultAssay(integrated) <- "RNA"
plot_density(integrated,
features = "CD8A")
DimPlot(integrated, label = TRUE) + NoLegend()
DimPlot(integrated, split.by = "tissue")
DimPlot(integrated, split.by = "time.point")
FeaturePlot(integrated,
features = "CD8A")
plot_density(integrated,
features = "CD4")
FeaturePlot(integrated,
features = "CD4")
DefaultAssay(integrated) <- "RNA"
plot_density(integrated,
features = "FOXP3")
FeaturePlot(integrated,
features = "FOXP3")
plot_density(integrated,
features = "IGHG1")
View(genes)
plot_density(integrated,
features = "TNFRSF17")
FeaturePlot(integrated,
features = "TNFRSF17")
plot_density(integrated,
features = "CD79A")
FeaturePlot(integrated,
features = "CD79A")
plot_density(integrated,
features = "CD79B")
FeaturePlot(integrated,
features = "CD79B")
FeaturePlot(integrated,
features = "MS4A1")
plot_density(integrated,
features = "MS4A1")
FeaturePlot(integrated,
features = "MS4A1")
FeaturePlot(integrated,
features = "CD19")
plot_density(integrated,
features = "CD19")
plot_density(integrated,
features = "ITGA5")
FeaturePlot(integrated,
features = "ITGA5")
plot_density(integrated,
features = "KIT")
FeaturePlot(integrated,
features = "KIT")
plot_density(integrated,
features = "SPN")
FeaturePlot(integrated,
features = "SPN")
plot_density(integrated,
features = "ICAM1")
FeaturePlot(integrated,
features = "ICAM1")
plot_density(integrated,
features = "BST1")
FeaturePlot(integrated,
features = "BST1")
plot_density(integrated,
features = "BCL6")
FeaturePlot(integrated,
features = "BCL6")
plot_density(integrated,
features = "CSCR5")
plot_density(integrated,
features = "CXCR5")
FeaturePlot(integrated,
features = "CXCR5")
plot_density(integrated,
features = "MME")
FeaturePlot(integrated,
features = "MME")
plot_density(integrated,
features = "SELL")
FeaturePlot(integrated,
features = "SELL")
plot_density(integrated,
features = "CCR7")
FeaturePlot(integrated,
features = "CCR7")
plot_density(integrated,
features = "FAS")
FeaturePlot(integrated,
features = "FAS")
plot_density(integrated,
features = "CD58")
FeaturePlot(integrated,
features = "CD58")
plot_density(integrated,
features = "B3GAT1")
FeaturePlot(integrated,
features = "B3GAT1")
plot_density(integrated,
features = "PDCD1")
FeaturePlot(integrated,
features = "PDCD1")
plot_density(integrated,
features = "CXCR5")
FeaturePlot(integrated,
features = "CXCR5")
plot_density(integrated,
features = "MAF")
FeaturePlot(integrated,
features = "MAF")
plot_density(integrated,
features = "CXCL13")
FeaturePlot(integrated,
features = "CXCL13")
plot_density(integrated,
features = "IL21")
FeaturePlot(integrated,
features = "IL21")
plot_density(integrated,
features = "SELL")
FeaturePlot(integrated,
features = "SELL")
plot_density(integrated,
features = "ITGAM")
FeaturePlot(integrated,
features = "ITGAM")
plot_density(integrated,
features = "ITGAX")
FeaturePlot(integrated,
features = "ITGAX")
plot_density(integrated,
features = "CD14")
FeaturePlot(integrated,
features = "CD14")
plot_density(integrated,
features = "CLEC9A")
FeaturePlot(integrated,
features = "CLEC9A")
plot_density(integrated,
features = "CLEC10A")
FeaturePlot(integrated,
features = "CLEC10A")
plot_density(integrated,
features = "BTLA")
FeaturePlot(integrated,
features = "BTLA")
plot_density(integrated,
features = "THBD")
FeaturePlot(integrated,
features = "THBD")
plot_density(integrated,
features = "BATF3")
FeaturePlot(integrated,
features = "BATF3")
markers <- FindAllMarkers(integrated)
save.csv(markers, "all.markers.csv")
write.csv(markers, "all.markers.csv")
colData <- readRDS(file = "integratedNewData_withMNN.rds")
colData$tissue <- ifelse(grepl("iWAT", colData$sample_id), "iWAT", as.character(colData$tissue))
colData$mtD2pos <- ifelse(colData$mtD2 >= 1.5, "Yes", "No")
`%!in%` <- Negate("%in%")
subset <- colData[colData$pred.conf > 0.7 & grepl("MitoFat", colData$file_origin) & colData$tissue != "Heart", ]
hm.markers <- c("CD45", "EpCAM", "CD31", "Ly6C", "CD9", "CD95", "CD73", "CD44", "LYVE.1", "CD34", "CD140a", "CD90.2")
hm.markers <- hm.markers[hm.markers %in% colnames(subset)]
summary <- subset %>%
group_by(pred.cluster ) %>%
summarise(across(hm.markers, median))
library(dplyr)
summary <- subset %>%
group_by(pred.cluster ) %>%
summarise(across(hm.markers, median))
names <- paste0("C", summary$pred.cluster)
summary <- summary[,-1]
normalized <- function(x) {
(x-min(x))/(max(x)-min(x))
}
summary1 <- as.data.frame(summary)
rownames(summary1) <- names
pdf("20211119_OverlapHeatmap_median_selectedMarkers.pdf", height = 4, width = 6)
pheatmap::pheatmap(summary1, show_rownames = TRUE, color = viridis::viridis_pal()(50))
dev.off()
pdf("20211119_OverlapHeatmap_Zscore_selectedMarkers.pdf", height = 4, width = 6)
pheatmap::pheatmap(summary1, show_rownames = TRUE, scale = "column", color = viridis::viridis_pal()(50))
dev.off()
summary <- sapply(summary, normalized)
rownames(summary) <- names
pdf("20211119_OverlapHeatmap_minMax_selectedMarkers.pdf", height = 4, width = 6)
pheatmap::pheatmap(summary, show_rownames = TRUE, color = viridis::viridis_pal()(50))
dev.off()
tmp <- readRDS("./data/processed/integratedDF.rds")
tmp <- readRDS("./data/processed/integratedDF.rds")
tmp <- readRDS("./data/processed/integratedDF.rds")
head(tmp)
tmp <- tmp[-which(grepl("Set1_"), tmp$sample_id),]
tmp <- tmp[-which(grepl("Set1_", tmp$sample_id)),]
paste(mice.to.compare, collapse = "|")
mice.to.compare <- c(8,15,16,5,6,7)
paste(mice.to.compare, collapse = "|")
tmp <- tmp[which(grepl(paste(mice.to.compare, collapse = "|"), tmp$sample_id)),]
tmp$mtD2_pos <- ifelse(tmp$mtD2 >= 1.5, "Yes", "No")
y <- tmp %>% group_by(cluster.sq, tissue, chow, mtD2_pos, .drop = F) %>%
summarise(n = n()) %>%
ungroup() %>%
complete(cluster.sq, tissue, age, mtD2_pos,
fill = list(n = 0))
library(tidyr)
y <- tmp %>% group_by(cluster.sq, tissue, chow, mtD2_pos, .drop = F) %>%
summarise(n = n()) %>%
ungroup() %>%
complete(cluster.sq, tissue, age, mtD2_pos,
fill = list(n = 0))
tmp$mtD2_pos <- ifelse(tmp$mtD2 >= 1.5, "Yes", "No")
y <- tmp %>% group_by(cluster.sq, tissue, chow, mtD2_pos, .drop = F) %>%
summarise(n = n()) %>%
ungroup() %>%
complete(cluster.sq, tissue, chow, mtD2_pos,
fill = list(n = 0))
y <- na.omit(y)
#One more layer of summary
y <- y %>% group_by(cluster.sq, tissue, age) %>%
mutate(sum = sum(n))
#One more layer of summary
y <- y %>% group_by(cluster.sq, tissue, chow) %>%
mutate(sum = sum(n))
#Scaling Values
y$scale <- y$n/y$sum
y$scale[is.nan(y$scale)] <- 0
y <- na.omit(y)
#Isolate only the "yes" cells for Bar Graph
y <- y[y$mtD2_pos == "Yes",]
y$age <- factor(y$age, levels = c("5mo", "20mo"))
unique(y$chow)
y$axis <- 1
update_geom_defaults("point", list(alpha=1))
library(ggplot2)
update_geom_defaults("point", list(alpha=1))
ggplot(y, aes(x = as.factor(cluster.sq), y=scale*100)) +
geom_bar(stat = "identity") +
geom_point(aes(color = as.factor(cluster.sq), y = axis*75, size = sum)) +
coord_polar() +
facet_grid(y$age ~ y$tissue) +
theme_classic() +
guides(color = F) +
scale_color_manual(values = mycolors) +
theme(axis.text.x = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.title = element_blank())
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(tidyr)
mycolors <- colorRampPalette(brewer.pal(8, "Set1"))(length(unique(tmp$cluster.sq)))
ggplot(y, aes(x = as.factor(cluster.sq), y=scale*100)) +
geom_bar(stat = "identity") +
geom_point(aes(color = as.factor(cluster.sq), y = axis*75, size = sum)) +
coord_polar() +
facet_grid(y$age ~ y$tissue) +
theme_classic() +
guides(color = F) +
scale_color_manual(values = mycolors) +
theme(axis.text.x = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.title = element_blank())
ggplot(y, aes(x = as.factor(cluster.sq), y=scale*100)) +
geom_bar(stat = "identity") +
geom_point(aes(color = as.factor(cluster.sq), y = axis*75, size = sum)) +
coord_polar() +
facet_grid(y$tissue ~ y$chow) +
theme_classic() +
guides(color = F) +
scale_color_manual(values = mycolors) +
theme(axis.text.x = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.title = element_blank())
y$tissue <- factor(y$tissue, levels = c("eWAT", "iWAT", "BAT"))
ggplot(y, aes(x = as.factor(cluster.sq), y=scale*100)) +
geom_bar(stat = "identity") +
geom_point(aes(color = as.factor(cluster.sq), y = axis*75, size = sum)) +
coord_polar() +
facet_grid(y$tissue ~ y$chow) +
theme_classic() +
guides(color = F) +
scale_color_manual(values = mycolors) +
theme(axis.text.x = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.title = element_blank())
View(y)
head(tmp)
unique(tmp$chow)
tmp <- tmp[tmp$chow != "Chow",]
tmp$mtD2_pos <- ifelse(tmp$mtD2 >= 1.5, "Yes", "No")
y <- tmp %>% group_by(cluster.sq, tissue, chow, mtD2_pos, .drop = F) %>%
summarise(n = n()) %>%
ungroup() %>%
complete(cluster.sq, tissue, chow, mtD2_pos,
fill = list(n = 0))
y <- na.omit(y)
#One more layer of summary
y <- y %>% group_by(cluster.sq, tissue, chow) %>%
mutate(sum = sum(n))
#Scaling Values
y$scale <- y$n/y$sum
y$scale[is.nan(y$scale)] <- 0
y <- na.omit(y)
#Isolate only the "yes" cells for Bar Graph
y <- y[y$mtD2_pos == "Yes",]
y$axis <- 1
y$tissue <- factor(y$tissue, levels = c("eWAT", "iWAT", "BAT"))
update_geom_defaults("point", list(alpha=1))
ggplot(y, aes(x = as.factor(cluster.sq), y=scale*100)) +
geom_bar(stat = "identity") +
geom_point(aes(color = as.factor(cluster.sq), y = axis*75, size = sum)) +
coord_polar() +
facet_grid(y$tissue ~ y$chow) +
theme_classic() +
guides(color = F) +
scale_color_manual(values = mycolors) +
theme(axis.text.x = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.title = element_blank())
ggsave("./outputs/WeightMatchedControls.pdf", height = 8, width=4)
ggplot(y, aes(x = as.factor(cluster.sq), y=scale*100)) +
geom_bar(stat = "identity") +
geom_point(aes(color = as.factor(cluster.sq), y = axis*75, size = sum)) +
coord_polar() +
facet_grid(y$tissue ~ y$chow) +
theme_classic() +
guides(color = F, size = FALSE) +
scale_color_manual(values = mycolors) +
theme(axis.text.x = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.title = element_blank())
ggsave("./outputs/WeightMatchedControls.pdf", height = 8, width=4)
sce <- readRDS("sce_flowset_filtered_logical.rds"
sce <- readRDS("sce_flowset_filtered_logical.rds")
View(sce)
library(bluster)
set.seed(0101010)
kgraph.clusters <- clusterRows(na.omit(sce@int_colData@listData$reducedDims$UMAP),
TwoStepParam(
first=KmeansParam(centers=1000),
second=NNGraphParam(k=5)
)
)
tmp <- na.omit(data.frame(sce@int_colData@listData$reducedDims$UMAP, t(sce@assays@data$exprs)))
tmp$calc.cluster <- kgraph.clusters
tmp$bardcode <- seq_len(nrow(tmp))
tmp$bardcode<-sprintf("%07d", tmp$bardcode)
tmp$bardcode <- paste0("cell.new:", tmp$bardcode)
new.markers <- colnames(tmp)[3:37]
orig.dat <- readRDS("./integratedDF.rds")
orig.dat$bardcode <- seq_len(nrow(orig.dat))
orig.dat$bardcode<-sprintf("%06d", orig.dat$bardcode)
orig.dat$bardcode <- paste0("old.cell:", orig.dat$bardcode)
old.markers <- colnames(orig.dat)[11:45]
common.markers <- intersect(old.markers, new.markers)
common.markers <- common.markers[-6] #mtD2
matrix1 <- colData[,which(colnames(colData) %in% common.markers)]
matrix1 <- tmp[,which(colnames(tmp) %in% common.markers)]
rownames(matrix1) <- colData$bardcode
rownames(matrix1) <- tm$bardcode
rownames(matrix1) <- tmp$bardcode
View(matrix1)
matrix2 <- orig.dat[,match(colnames(matrix1), colnames(orig.dat))]
rownames(matrix2) <- orig.dat$bardcode
common.markers
library(batchelor)
library(RANN)
library(SingleCellExperiment)
library(rlang)
library(Seurat)
source("function.R")
source("function.R")
coordinates <- MNN.overlay(matrix1, matrix2,
k.param = 30,
ref.positions = as.matrix(orig.dat[,c("X1","X2")]),
ref.assignments = orig.dat$cluster.sq)
tmp <- cbind.data.frame(tmp, coordinates)
saveRDS(tmp, "integratedNewData_withMNN.rds")
tmp <- readRDS("./data/processed/integratedDF.rds")
mice.to.compare <- c(8,15,16,5,6,7,1,4)
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(tidyr)
mycolors <- colorRampPalette(brewer.pal(8, "Set1"))(length(unique(tmp$cluster.sq)))
tmp <- tmp[-which(grepl("Set1_", tmp$sample_id)),]
tmp <- tmp[which(grepl(paste(mice.to.compare, collapse = "|"), tmp$sample_id)),]
#tmp <- tmp[tmp$chow != "Chow",]
tmp$mtD2_pos <- ifelse(tmp$mtD2 >= 1.5, "Yes", "No")
y <- tmp %>% group_by(cluster.sq, tissue, chow, mtD2_pos, .drop = F) %>%
summarise(n = n()) %>%
ungroup() %>%
complete(cluster.sq, tissue, chow, mtD2_pos,
fill = list(n = 0))
y <- na.omit(y)
#One more layer of summary
y <- y %>% group_by(cluster.sq, tissue, chow) %>%
mutate(sum = sum(n))
#Scaling Values
y$scale <- y$n/y$sum
y$scale[is.nan(y$scale)] <- 0
y <- na.omit(y)
#Isolate only the "yes" cells for Bar Graph
y <- y[y$mtD2_pos == "Yes",]
y$axis <- 1
y$tissue <- factor(y$tissue, levels = c("eWAT", "iWAT", "BAT"))
update_geom_defaults("point", list(alpha=1))
ggplot(y, aes(x = as.factor(cluster.sq), y=scale*100)) +
geom_bar(stat = "identity") +
geom_point(aes(color = as.factor(cluster.sq), y = axis*75, size = sum)) +
coord_polar() +
facet_grid(y$tissue ~ y$chow) +
theme_classic() +
guides(color = F, size = FALSE) +
scale_color_manual(values = mycolors) +
theme(axis.text.x = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.title = element_blank())
ggsave("./outputs/WeightMatchedControls.pdf", height = 8, width=4)
ggsave("./outputs/WeightMatchedControls.pdf", height = 10, width=6)
ggplot(y, aes(x = as.factor(cluster.sq), y=scale*100)) +
geom_bar(stat = "identity") +
geom_point(aes(color = as.factor(cluster.sq), y = axis*75, size = sum)) +
coord_polar() +
facet_grid(y$tissue ~ y$chow) +
theme_classic() +
guides(color = F, size = FALSE) +
scale_color_manual(values = mycolors) +
theme(axis.text.x = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.title = element_blank())
ggsave("./outputs/WeightMatchedControls.pdf", height = 4.5, width=8)
bw <- data.frame(c(46.2, 47.6, 41.9, 45.8, 38.9, 41.2))
View(bw)
bw <- data.frame(weight = c(46.2, 47.6, 41.9, 45.8, 38.9, 41.2), diet = c(rep("Lard-HFD",3), rep("HCO-HFD", 3))
bw <- data.frame(weight = c(46.2, 47.6, 41.9, 45.8, 38.9, 41.2), diet = c(rep("Lard-HFD",3), rep("HCO-HFD", 3)))
View(bw)
bw <- reshape2::melt(bw)
View(bw)
ggplot(bw, aes(x=diet, y = value)) +
geom_boxplot()
ggplot(bw, aes(x=diet, y = value)) +
geom_boxplot() +
ylim(0,50)
ggplot(bw, aes(x=diet, y = value)) +
geom_boxplot() +
ylim(0,50) +
theme_classic()
bw <- data.frame(weight = c(46.2, 47.6, 41.9, 45.8, 38.9, 41.2), diet = c(rep("Lard-HFD",3), rep("HCO-HFD", 3)))
t.test(bw$weight, bw$diet)
t.test(bw$weight ~ bw$diet)
ggsave("./outputs/WeightMatchedControls_bodyweight.pdf", height = 2, width = 1)
ggplot(bw, aes(x=diet, y = value)) +
geom_boxplot() +
ylim(0,50) +
theme_classic()
bw <- reshape2::melt(bw)
ggplot(bw, aes(x=diet, y = value)) +
geom_boxplot() +
ylim(0,50) +
theme_classic()
ggsave("./outputs/WeightMatchedControls_bodyweight.pdf", height = 2, width = 1)
ggsave("./outputs/WeightMatchedControls_bodyweight.pdf", height = 2, width = 3)
ggplot(bw, aes(x=diet, y = value)) +
geom_boxplot() +
ylim(0,50) +
theme_classic() +
theme(axis.title = element_blank())
ggsave("./outputs/WeightMatchedControls_bodyweight.pdf", height = 2, width = 3)
ggsave("./outputs/WeightMatchedControls_bodyweight.pdf", height = 2, width = 2)
