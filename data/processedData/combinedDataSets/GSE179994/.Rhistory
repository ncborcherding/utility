install.packages(c("ape", "cli", "clipr", "colorspace", "conquer", "crayon", "densityClust", "desc", "DT", "evaluate", "future", "glue", "gmp", "jsonlite", "ks", "locfit", "mgcv", "openssl", "philentropy", "pracma", "recipes", "Rfast", "rlang", "rmarkdown", "RSQLite", "scattermore", "spatstat.core", "spatstat.geom", "survival", "tidyselect", "tinytex", "torch", "VGAM", "withr", "xfun", "xgboost", "XML", "yaml"))
install.packages(c("ape", "cli", "clipr", "colorspace", "conquer", "crayon", "densityClust", "desc", "DT", "evaluate", "future", "glue", "gmp", "jsonlite", "ks", "locfit", "mgcv", "openssl", "philentropy", "pracma", "recipes", "Rfast", "rlang", "rmarkdown", "RSQLite", "scattermore", "spatstat.core", "spatstat.geom", "survival", "tidyselect", "tinytex", "torch", "VGAM", "withr", "xfun", "xgboost", "XML", "yaml"))
install.packages(c("ape", "cli", "clipr", "colorspace", "conquer", "crayon", "densityClust", "desc", "DT", "evaluate", "future", "glue", "gmp", "jsonlite", "ks", "locfit", "mgcv", "openssl", "philentropy", "pracma", "recipes", "Rfast", "rlang", "rmarkdown", "RSQLite", "scattermore", "spatstat.core", "spatstat.geom", "survival", "tidyselect", "tinytex", "torch", "VGAM", "withr", "xfun", "xgboost", "XML", "yaml"))
install.packages(c("ape", "cli", "clipr", "colorspace", "conquer", "crayon", "densityClust", "desc", "DT", "evaluate", "future", "glue", "gmp", "jsonlite", "ks", "locfit", "mgcv", "openssl", "philentropy", "pracma", "recipes", "Rfast", "rlang", "rmarkdown", "RSQLite", "scattermore", "spatstat.core", "spatstat.geom", "survival", "tidyselect", "tinytex", "torch", "VGAM", "withr", "xfun", "xgboost", "XML", "yaml"))
suppressPackageStartupMessages(library(Seurat))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(viridis))
suppressPackageStartupMessages(library(scDblFinder))
suppressPackageStartupMessages(library(BiocParallel))
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(ProjecTILs))
suppressPackageStartupMessages(library(scGate))
suppressPackageStartupMessages(library(Matrix))
suppressPackageStartupMessages(library(SingleR))
suppressPackageStartupMessages(library(celldex))
suppressPackageStartupMessages(library(scRepertoire))
PT.ref <- load.reference.map("~/Documents/GitHub/utility/annotation/ref_TILAtlas_mouse_v1.rds")
HPCA <- HumanPrimaryCellAtlasData()
Monaco <- MonacoImmuneData()
scGate_models_DB <- get_scGateDB()
RNA.dat <- readRDS("ProcessedRNA_forutility.rds")
table(RNA.dat$orig.ident)
list <- SplitObject(RNA.dat, split.by = "orig.ident")
directory <- readxl::read_xlsx("./summaryInfo/sample.directory.xlsx") #Meta.data
directory <- readxl::read_xlsx("~/Documents/GitHub/utility/summaryInfo/sample.directory.xlsx") #Meta.data
directory <- directory[directory$Cohort == "GSE179994",]
unique(RNA.dat$orig.ident)
View(list)
utility.sample.id <- directory$SampleLabel
i <- 1
tmp <- list[[i]]
head(tmp[[]])
##Several data sets do not have the MT in front of the mitochondria genes
mito <- c("ATP8", "ATP6", "CO1", "CO2", "CO3", "CYB", "ND1", "ND2", "ND3", "ND4L", "ND4", "ND5", "ND6", "RNR2", "TA", "TR", "TN", "TD", "TC", "TE", "TQ", "TG", "TH", "TI", "TL1", "TL2", "TK", "TM", "TF", "TP", "TS1", "TS2", "TT", "TW", "TY", "TV", "RNR1")
##Several data sets do not have the MT in front of the mitochondria genes
mito <- c("ATP8", "ATP6", "CO1", "CO2", "CO3", "CYB", "ND1", "ND2", "ND3", "ND4L", "ND4", "ND5", "ND6", "RNR2", "TA", "TR", "TN", "TD", "TC", "TE", "TQ", "TG", "TH", "TI", "TL1", "TL2", "TK", "TM", "TF", "TP", "TS1", "TS2", "TT", "TW", "TY", "TV", "RNR1")
##Several data sets do not have the MT in front of the mitochondria genes
mito <- c("ATP8", "ATP6", "CO1", "CO2", "CO3", "CYB", "ND1", "ND2", "ND3", "ND4L", "ND4", "ND5", "ND6", "RNR2", "TA", "TR", "TN", "TD", "TC", "TE", "TQ", "TG", "TH", "TI", "TL1", "TL2", "TK", "TM", "TF", "TP", "TS1", "TS2", "TT", "TW", "TY", "TV", "RNR1")
x <- which(rownames(tmp) %in% mito)
if (length(x) > 0) {
y <- rownames(tmp)[x]
y<- paste0("MT-", y)
rownames(tmp)[x] <- y
}
tmp <- subset(tmp, subset = nFeature_RNA > 100) #filter out low count/feature cells
View(PT.ref)
View(list)
head(list[[20]])
head(list[[40]])
head(list[[41]])
rownames(list[[40]][[]])[1:5]
strsplit(rownames(list[[40]][[]])[1:5], nchar(rownames(list[[40]][[]])[1:5])-16, nchar(rownames(list[[40]][[]])[1:5]))
strsplit(rownames(list[[40]][[]])[1:5], nchar(rownames(list[[40]][[]])[1])-16, nchar(rownames(list[[40]][[]])[1]))
strsplit(rownames(list[[40]][[]])[1:5], nchar(rownames(list[[40]][[]])[1])-16, nchar(rownames(list[[40]][[]])[1]))
nchar(rownames(list[[40]][[]])[1])
strsplit(rownames(list[[40]][[]])[1:5], 12, nchar(rownames(list[[40]][[]])[1]))
new.barcodes <- rownames(tmp@meta.data)
new.barcodes < - substring(new.barcodes, nchar(new.barcodes)-17, nchar(new.barcodes))
new.barcodes < - substr(new.barcodes, nchar(new.barcodes)-17, nchar(new.barcodes))
nchar(new.barcodes)-17
nchar(new.barcodes)
new.barcodes < - substr(new.barcodes, nchar(new.barcodes)-17, nchar(new.barcodes))
new.barcodes < - stringr::str_sub(new.barcodes, nchar(new.barcodes)-17, nchar(new.barcodes))
new.barcodes
new.barcodes < - stringr::str_sub(new.barcodes, nchar(new.barcodes)-17, nchar(new.barcodes))
for(x in seq_leng(length(new.barcodes))) {
new.barcodes[x] < - stringr::str_sub(new.barcodes[x], nchar(new.barcodes[x])-17, nchar(new.barcodes[x]))
}
for(x in seq_len(length(new.barcodes))) {
new.barcodes[x] < - stringr::str_sub(new.barcodes[x], nchar(new.barcodes[x])-17, nchar(new.barcodes[x]))
}
new.barcodes <- rownames(tmp@meta.data)
stringr::str_sub(new.barcodes[x], nchar(new.barcodes[x])-17, nchar(new.barcodes[x]))
stringr::str_sub(new.barcodes[x], nchar(new.barcodes[x])-18, nchar(new.barcodes[x]))
new.barcodes <- stringr::str_sub(new.barcodes, nchar(new.barcodes)-17, nchar(new.barcodes))
new.barcodes <- rownames(tmp@meta.data)
new.barcodes <- stringr::str_sub(new.barcodes, nchar(new.barcodes)-17, nchar(new.barcodes))
tmp  <- RenameCells(object = tmp , new.names = paste0(utility.sample.id[i], "_", new.barcodes))
head(tmp[[]])
p1 <- VlnPlot(object = tmp, features = c("nCount_RNA")) + theme(legend.position = "none")
p2 <- VlnPlot(object = tmp, features = c("nFeature_RNA")) + theme(legend.position = "none")
p3 <- VlnPlot(object = tmp, features = c("mito.genes")) + theme(legend.position = "none")
tmp[["mito.genes"]] <- PercentageFeatureSet(tmp, pattern = "^MT-")
p1 <- VlnPlot(object = tmp, features = c("nCount_RNA")) + theme(legend.position = "none")
p2 <- VlnPlot(object = tmp, features = c("nFeature_RNA")) + theme(legend.position = "none")
p3 <- VlnPlot(object = tmp, features = c("mito.genes")) + theme(legend.position = "none")
pdf(paste0("./qc/", utility.sample.id[i], ".pdf"), height = 8, width=12)
grid.arrange(p1, p2, p3, ncol = 3)
pdf(paste0("./qc/", utility.sample.id[i], ".pdf"), height = 8, width=12)
pdf(paste0("~/Documents/GitHub/utility/qc/", utility.sample.id[i], ".pdf"), height = 8, width=12)
grid.arrange(p1, p2, p3, ncol = 3)
dev.off()
standev <- sd(log(tmp$nFeature_RNA))*2.5 #cutting off above standard deviation of 2.5
mean <- mean(log(tmp$nFeature_RNA))
cut <- round(exp(standev+mean))
tmp <- subset(tmp, subset = mito.genes < 10 & nFeature_RNA < cut)
sce <- as.SingleCellExperiment(tmp)
sce <- scDblFinder(sce, BPPARAM=MulticoreParam(3))
doublets <- data.frame(db.class = sce$scDblFinder.class, db.score = sce$scDblFinder.score)
rownames(doublets) <- rownames(sce@colData)
tmp <- AddMetaData(tmp, doublets)
rm(sce)
#############################################
#Projectil Annotation of Cell Types
#############################################
query.projected <- make.projection(tmp,
ref = PT.ref,
scGate_model = scGate_models_DB$human$generic$Tcell.alphabeta,
ncores = 1)
#Lapply across list of Seurat objects
query.projected <- cellstate.predict(ref = PT.ref, query =query.projected , reduction = "umap", ndim = 2)
meta <- query.projected[[]][c("functional.cluster", "functional.cluster.conf")]
colnames(meta) <- c("PT.annot", "PT.score")
rownames(meta) <- stringr::str_remove(rownames(meta), "Q_")
tmp <- AddMetaData(tmp, meta)
rm(query.projected)
#############################################
#Singler Annotation of Cell Types
#############################################
tmp.2 <- tmp@assays[["RNA"]]@counts
####This approach for matrix conversion saves some memory
tmp.2 <- tmp.2[tabulate(summary(tmp.2)$i) != 0, , drop = FALSE]
com.res1 <- SingleR(tmp.2, ref=HPCA, labels=HPCA$label.fine, assay.type.test=1)
df <- data.frame("labels" = com.res1$labels, "pruned.labels" = com.res1$pruned.labels)
rownames(df) <- rownames(com.res1)
colnames(df) <- paste0("HPCA.", colnames(df))
tmp <- AddMetaData(tmp,  df)
com.res2 <- SingleR(tmp.2, ref=Monaco, labels=Monaco$label.fine, assay.type.test=1)
df <- data.frame("labels" = com.res2$labels, "pruned.labels" = com.res2$pruned.labels)
rownames(df) <- rownames(com.res1)
colnames(df) <- paste0("Monaco.", colnames(df))
tmp <- AddMetaData(tmp,  df)
rm(tmp.2)
rm(df)
head(tmp[[]])
saveRDS(tmp, paste0("./data/processedData/individualSeurat/", utility.sample.id[i], ".rds"))
saveRDS(tmp, paste0("~/Documents/GitHub/utility/data/processedData/individualSeurat/", utility.sample.id[i], ".rds"))
#################################
#Filter and Save Just T-AB cells
#################################
tmp$T.filter <- ifelse(!is.na(tmp$PT.annot) & !is.na(tmp$CTaa), "Tcell", "Non")
tmp <- subset(tmp, T.filter == "Tcell")
saveRDS(tmp, paste0("~/Documents/GitHub/utility/data/processedData/individualTcells/", utility.sample.id[i], ".rds"))
TCR <- tmp[[]][,c("barcode", "CTgene", "CTaa")]
rownames(TCR) <- NULL
saveRDS(TCR, paste0("~/Documents/GitHub/utility/data/processedData/TCRs/", utility.sample.id[i], ".rds"))
for (i in seq_along(list)){
tmp <- list[[i]]
tmp <- subset(tmp, subset = nFeature_RNA > 100) #filter out low count/feature cells\
new.barcodes <- rownames(tmp@meta.data)
new.barcodes <- stringr::str_sub(new.barcodes, nchar(new.barcodes)-17, nchar(new.barcodes))
tmp  <- RenameCells(object = tmp , new.names = paste0(utility.sample.id[i], "_", new.barcodes))
tmp[["mito.genes"]] <- PercentageFeatureSet(tmp, pattern = "^MT-")
p1 <- VlnPlot(object = tmp, features = c("nCount_RNA")) + theme(legend.position = "none")
p2 <- VlnPlot(object = tmp, features = c("nFeature_RNA")) + theme(legend.position = "none")
p3 <- VlnPlot(object = tmp, features = c("mito.genes")) + theme(legend.position = "none")
pdf(paste0("~/Documents/GitHub/utility/qc/", utility.sample.id[i], ".pdf"), height = 8, width=12)
grid.arrange(p1, p2, p3, ncol = 3)
dev.off()
###########################
#Here is the filtering step
############################
standev <- sd(log(tmp$nFeature_RNA))*2.5 #cutting off above standard deviation of 2.5
mean <- mean(log(tmp$nFeature_RNA))
cut <- round(exp(standev+mean))
tmp <- subset(tmp, subset = mito.genes < 10 & nFeature_RNA < cut)
###########################################
#Estimate Doublets for Each Sequencing Run
############################################
sce <- as.SingleCellExperiment(tmp)
sce <- scDblFinder(sce, BPPARAM=MulticoreParam(3))
doublets <- data.frame(db.class = sce$scDblFinder.class, db.score = sce$scDblFinder.score)
rownames(doublets) <- rownames(sce@colData)
tmp <- AddMetaData(tmp, doublets)
rm(sce)
#############################################
#Projectil Annotation of Cell Types
#############################################
query.projected <- make.projection(tmp,
ref = PT.ref,
scGate_model = scGate_models_DB$human$generic$Tcell.alphabeta,
ncores = 1)
#Lapply across list of Seurat objects
query.projected <- cellstate.predict(ref = PT.ref, query =query.projected , reduction = "umap", ndim = 2)
meta <- query.projected[[]][c("functional.cluster", "functional.cluster.conf")]
colnames(meta) <- c("PT.annot", "PT.score")
rownames(meta) <- stringr::str_remove(rownames(meta), "Q_")
tmp <- AddMetaData(tmp, meta)
rm(query.projected)
#############################################
#Singler Annotation of Cell Types
#############################################
tmp.2 <- tmp@assays[["RNA"]]@counts
####This approach for matrix conversion saves some memory
tmp.2 <- tmp.2[tabulate(summary(tmp.2)$i) != 0, , drop = FALSE]
com.res1 <- SingleR(tmp.2, ref=HPCA, labels=HPCA$label.fine, assay.type.test=1)
df <- data.frame("labels" = com.res1$labels, "pruned.labels" = com.res1$pruned.labels)
rownames(df) <- rownames(com.res1)
colnames(df) <- paste0("HPCA.", colnames(df))
tmp <- AddMetaData(tmp,  df)
com.res2 <- SingleR(tmp.2, ref=Monaco, labels=Monaco$label.fine, assay.type.test=1)
df <- data.frame("labels" = com.res2$labels, "pruned.labels" = com.res2$pruned.labels)
rownames(df) <- rownames(com.res1)
colnames(df) <- paste0("Monaco.", colnames(df))
tmp <- AddMetaData(tmp,  df)
rm(tmp.2)
rm(df)
saveRDS(tmp, paste0("~/Documents/GitHub/utility/data/processedData/individualSeurat/", utility.sample.id[i], ".rds"))
#################################
#Filter and Save Just T-AB cells
#################################
tmp$T.filter <- ifelse(!is.na(tmp$PT.annot) & !is.na(tmp$CTaa), "Tcell", "Non")
tmp <- subset(tmp, T.filter == "Tcell")
saveRDS(tmp, paste0("~/Documents/GitHub/utility/data/processedData/individualTcells/", utility.sample.id[i], ".rds"))
#################################
#Save Just TCRs
#################################
TCR <- tmp[[]][,c("barcode", "CTgene", "CTaa")]
rownames(TCR) <- NULL
saveRDS(TCR, paste0("~/Documents/GitHub/utility/data/processedData/TCRs/", utility.sample.id[i], ".rds"))
}
tmp[[]]
names(list)[1]
names(list)[i]
names(list)
tmp$T.filter <- ifelse(!is.na(tmp$PT.annot) & !is.na(tmp$CTaa), "Tcell", "Non")
tmp <- subset(tmp, T.filter == "Tcell")
for(i in 43:47) {
tmp <- list[[i]]
tmp <- subset(tmp, subset = nFeature_RNA > 100) #filter out low count/feature cells\
new.barcodes <- rownames(tmp@meta.data)
new.barcodes <- stringr::str_sub(new.barcodes, nchar(new.barcodes)-17, nchar(new.barcodes))
tmp  <- RenameCells(object = tmp , new.names = paste0(utility.sample.id[i], "_", new.barcodes))
tmp[["mito.genes"]] <- PercentageFeatureSet(tmp, pattern = "^MT-")
p1 <- VlnPlot(object = tmp, features = c("nCount_RNA")) + theme(legend.position = "none")
p2 <- VlnPlot(object = tmp, features = c("nFeature_RNA")) + theme(legend.position = "none")
p3 <- VlnPlot(object = tmp, features = c("mito.genes")) + theme(legend.position = "none")
pdf(paste0("~/Documents/GitHub/utility/qc/", utility.sample.id[i], ".pdf"), height = 8, width=12)
grid.arrange(p1, p2, p3, ncol = 3)
dev.off()
###########################
#Here is the filtering step
############################
standev <- sd(log(tmp$nFeature_RNA))*2.5 #cutting off above standard deviation of 2.5
mean <- mean(log(tmp$nFeature_RNA))
cut <- round(exp(standev+mean))
tmp <- subset(tmp, subset = mito.genes < 10 & nFeature_RNA < cut)
###########################################
#Estimate Doublets for Each Sequencing Run
############################################
sce <- as.SingleCellExperiment(tmp)
sce <- scDblFinder(sce, BPPARAM=MulticoreParam(3))
doublets <- data.frame(db.class = sce$scDblFinder.class, db.score = sce$scDblFinder.score)
rownames(doublets) <- rownames(sce@colData)
tmp <- AddMetaData(tmp, doublets)
rm(sce)
#############################################
#Projectil Annotation of Cell Types
#############################################
query.projected <- make.projection(tmp,
ref = PT.ref,
scGate_model = scGate_models_DB$human$generic$Tcell.alphabeta,
ncores = 1)
#Lapply across list of Seurat objects
query.projected <- cellstate.predict(ref = PT.ref, query =query.projected , reduction = "umap", ndim = 2)
meta <- query.projected[[]][c("functional.cluster", "functional.cluster.conf")]
colnames(meta) <- c("PT.annot", "PT.score")
rownames(meta) <- stringr::str_remove(rownames(meta), "Q_")
tmp <- AddMetaData(tmp, meta)
rm(query.projected)
#############################################
#Singler Annotation of Cell Types
#############################################
tmp.2 <- tmp@assays[["RNA"]]@counts
####This approach for matrix conversion saves some memory
tmp.2 <- tmp.2[tabulate(summary(tmp.2)$i) != 0, , drop = FALSE]
com.res1 <- SingleR(tmp.2, ref=HPCA, labels=HPCA$label.fine, assay.type.test=1)
df <- data.frame("labels" = com.res1$labels, "pruned.labels" = com.res1$pruned.labels)
rownames(df) <- rownames(com.res1)
colnames(df) <- paste0("HPCA.", colnames(df))
tmp <- AddMetaData(tmp,  df)
com.res2 <- SingleR(tmp.2, ref=Monaco, labels=Monaco$label.fine, assay.type.test=1)
df <- data.frame("labels" = com.res2$labels, "pruned.labels" = com.res2$pruned.labels)
rownames(df) <- rownames(com.res1)
colnames(df) <- paste0("Monaco.", colnames(df))
tmp <- AddMetaData(tmp,  df)
rm(tmp.2)
rm(df)
saveRDS(tmp, paste0("~/Documents/GitHub/utility/data/processedData/individualSeurat/", utility.sample.id[i], ".rds"))
#################################
#Filter and Save Just T-AB cells
#################################
tmp$T.filter <- ifelse(!is.na(tmp$PT.annot) & !is.na(tmp$CTaa), "Tcell", "Non")
tmp <- subset(tmp, T.filter == "Tcell")
saveRDS(tmp, paste0("~/Documents/GitHub/utility/data/processedData/individualTcells/", utility.sample.id[i], ".rds"))
#################################
#Save Just TCRs
#################################
TCR <- tmp[[]][,c("barcode", "CTgene", "CTaa")]
rownames(TCR) <- NULL
saveRDS(TCR, paste0("~/Documents/GitHub/utility/data/processedData/TCRs/", utility.sample.id[i], ".rds"))
}
View(RNA.dat)
